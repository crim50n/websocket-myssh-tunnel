#!/usr/bin/python3

import asyncio, asyncssh, websockets
import ssl, json, sys, mimetypes, os, posixpath

from concurrent.futures import ThreadPoolExecutor

security_rules = []

def check_rules(hostname, s_port):
	allowed = False
	for rule in security_rules:
		typ, addr, port = rule
		if typ == 'allow' and (addr == '*' or addr == hostname) and (addr == '*' or port == s_port):
			allowed = True
			break
		if typ == 'deny' and (addr == '*' or addr == hostname) and (addr == '*' or port == s_port):
			return
	return allowed

@asyncio.coroutine
def blacklist_reload():
	mtime = None
	while True:
		ctime = os.path.getmtime('../security.lst')
		if ctime != mtime:
			mtime = ctime
			security_rules.clear()
			with open('../security.lst', 'r') as fp:
				while True:
					line = fp.readline()
					if not line:
						break
					line = line.strip()
					if len(line) == 0:
						continue
					parts = line.split()
					try:
						assert (len(parts) == 3)
						assert (parts[0] == 'allow' or parts[0] == 'deny')
						if parts[2] != '*':
							port = int(parts[2])
							assert(port > 0 and port < 65536)
						security_rules.append((parts[0], parts[1], parts[2]))
					except:
						print("[warning]", "skip parsing line: '%s'" % line)
				
			print("Sec-Table:", security_rules)
		yield from asyncio.sleep(5)


io_pool_exc = ThreadPoolExecutor(max_workers=1)


class TunnelSSHClientSession(asyncssh.SSHClientSession):
	
	def __init__(self, websocket):
		self._websocket = websocket

	def connection_made(self, chan):
		self._chan = chan

	def session_started(self):
		print('A new session logged in.', file=sys.stderr)

	def data_received(self, data, datatype):
		asyncio.async(self._websocket.send(data), loop=asyncio.get_event_loop())

	def connection_lost(self, exc):
		if exc:
			print('SSH session error: ' + str(exc), file=sys.stderr)


class HTTPWebSocketServerProtocol(websockets.WebSocketServerProtocol):
	
	@asyncio.coroutine
	def handler(self):
		try:
			method, path, version = (yield from self.reader.readline())[:-2].decode().split()
			if method != 'GET' or not path.startswith('/') or version != 'HTTP/1.1':
				return
			headers = {}
			while self.state == 0:
				line = (yield from self.reader.readline())[:-2]
				if line == b'':
					break
				key, content = line.decode('utf-8').split(': ', 1)
				headers[key] = content
			if 'Sec-WebSocket-Key' not in headers:
				yield from self.do_http_response(path, headers)
				return
			feed_buffer = ('%s %s %s\r\n' % (method, path, version)).encode()
			for key in headers:
				feed_buffer += ('%s: %s\r\n' % (key, headers[key])).encode()
			self.reader._buffer = bytearray(feed_buffer + b'\r\n') + self.reader._buffer
			yield from super().handler()
		finally:
			self.writer.close()
			try:
				self.ws_server.unregister(self)
			except:
				pass
	
	@asyncio.coroutine
	def do_http_response(self, path, headers):
		path = path.split('?')[0]
		if path.startswith('/sftp-get/'):
			try:
				[hostname, port, username] = path[10:].split('/')
				for item in headers['Cookie'].split('; '):
					if item.startswith('path='):
						[path, passwd] = item[5:].split('&pass=')
						with (yield from asyncssh.connect(hostname, username=username, password=passwd, known_hosts=None)) as conn:
							with (yield from conn.start_sftp_client()) as sftp:
								if not (yield from sftp.exists(path)) or (yield from sftp.isdir(path)):
									response = 'HTTP/1.0 404 Not Found\r\n\r\nCannot get access to file %s@%s:%s!' % (username, hostname, path)
									self.writer.write(response.encode())
								else:
									response = 'HTTP/1.0 200 OK\r\nContent-type: application/octet-stream\r\nContent-Disposition: attachment; filename=%s\r\n\r\n' % path.split('/')[-1]
									self.writer.write(response.encode())
									with (yield from sftp.open(path, 'rb')) as fp:
										while self.state == 0:
											data = yield from fp.read(40960)
											if not data:
												break
											self.writer.write(data)
						break
			except Exception as exc:
				self.writer.write(("error: " + str(exc)).encode())
			finally:
				self.writer.close()
			return
		path = '/index.html' if path == '/' else path
		real_path = '.' + path.replace('..', '')
		if not os.path.isfile(real_path):
			return
		ext = posixpath.splitext(path)[-1].lower()
		ctype = mimetypes.types_map[ext] if ext in mimetypes.types_map.keys() else 'application/octet-stream'
		try:
			with open(real_path, 'rb') as fp:
				response = 'HTTP/1.0 200 OK\r\nContent-type: %s\r\n\r\n' % ctype
				self.writer.write(response.encode())
				while self.state == 0:
					data = fp.read(4096)
					if not data:
						break
					yield from asyncio.get_event_loop().run_in_executor(io_pool_exc, self.writer.write, data)
		except Exception as e:
			self.writer.write('HTTP/1.0 404 Not Found\r\n\r\nFile not found'.encode())
		finally:
			self.writer.close()



@asyncio.coroutine
def websocket_to_channel(_websocket, conn, init_width, init_height):
	try:
		def ssh_session_factory():
			return TunnelSSHClientSession(_websocket)

		@asyncio.coroutine
		def wait_and_close(_websocket, chan):
			try:
				yield from chan.wait_closed()
			except:
				pass

		chan, session = yield from conn.create_session(ssh_session_factory, 'bash', term_type='xterm', term_size=(init_width, init_height), encoding=None)
		asyncio.async(wait_and_close(_websocket, chan), loop=asyncio.get_event_loop())
		while True:
			data = yield from _websocket.recv()
			if not data:
				break
			data = json.loads(data)
			if data['type'] == 'data':
				real_data = bytes.fromhex(data['request'])
				chan.write(real_data)
			chan.change_terminal_size(data['width'], data['height'])
		# chan.write_eof()
	except websockets.exceptions.ConnectionClosed:
		print('A previous session exited abnormally.', file=sys.stderr)
	except BrokenPipeError:
		print('A previous session exited normally.', file=sys.stderr)
	except:
		import traceback
		traceback.print_exc()
	finally:
		try:
			conn.close()
		except:
			pass


@asyncio.coroutine
def websocket_ssh_handler(_websocket, path):
	try:
		[null, protocol, hostname, s_port, username] = path.split('/')
		if not check_rules(hostname, s_port):
			return
		
		data = yield from _websocket.recv()
		data = json.loads(data)
		assert(data['type'] == 'login')
		password = data['password']
		if protocol == 'sftp-put':
			fname = data['fname']
			slices = data['slices']
			with (yield from asyncssh.connect(hostname, username=username, password=password, known_hosts=None)) as conn:
				with (yield from conn.start_sftp_client()) as sftp:
					if (yield from sftp.exists(fname)):
						yield from _websocket.send('Original file "%s/%s" already exists at Remote Server.' % ((yield from sftp.getcwd()), fname))
					else:
						with (yield from sftp.open(fname, 'wb')) as fp:
							for i in range(slices):
								yield from _websocket.send('Ack')
								data = yield from _websocket.recv()
								assert(isinstance(data, bytes))
								yield from fp.write(data)
						yield from _websocket.send('Done')
			return
		
		assert(protocol == 'ssh')
		conn, client = yield from asyncssh.create_connection(asyncssh.SSHClient, hostname, username=username, port=int(s_port), password=password, known_hosts=None)
		yield from websocket_to_channel(_websocket, conn, data['width'], data['height'])
	except asyncssh.misc.DisconnectError as e:
		yield from _websocket.send(e.reason)
	except ConnectionRefusedError as e:
		yield from _websocket.send('Error: Cannot connect to SSH server %s' % hostname)
	except:
		import traceback
		traceback.print_exc()
	finally:
		try:
			conn.close()
		except:
			pass


os.chdir('html/')

if not os.path.exists('../cert.pem') or os.path.getsize('../cert.pem') == 0:
	os.system('openssl req -x509 -nodes -days 3650 -subj "/CN=myssh/" -newkey rsa:2048 -keyout ../cert.pem -out ../cert.pem')

context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
context.load_cert_chain(certfile='../cert.pem')
context.set_ciphers('RSA')

start_server = websockets.serve(websocket_ssh_handler, '0.0.0.0', 8022, klass=HTTPWebSocketServerProtocol, ssl=context)
print("Hi, please visit -> https://0.0.0.0:8022")

asyncio.async(blacklist_reload(), loop=asyncio.get_event_loop())
asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()

